---
description: 
globs: 
alwaysApply: true
---
# components-rule.mdc

## 概要

- `ui` ディレクトリは「見た目のみ」を責務とする汎用的なReactコンポーネントを配置します。
- `features` ディレクトリは「特定の機能や見た目」を実現するためのコンポーネントを配置します（状態やロジックを含むことができます）。
- ディレクトリ構造やファイル構成は `plop-templates` のテンプレートに従います。
- **コンポーネントを新規作成する際は必ずplopコマンドを使用してください。手動でファイルやディレクトリを作成しないでください。**

---

## ディレクトリ構成

### uiコンポーネント

- 汎用的な見た目のみのコンポーネント
- ディレクトリ例: `src/ui/ComponentName/`
- 構成ファイル例:
  - `index.tsx` … 見た目のみのReactコンポーネント
  - `index.module.css` … スタイル
  - `index.stories.tsx` … Storybook用ファイル
  - `index.test.tsx` … テストファイル

#### コーディングルール
- propsは見た目に必要なものだけを受け取る
- 状態やロジックは持たない
- テストは「childrenが表示される」などのスモークテストが中心

---

### featuresコンポーネント

- 特定の機能や状態、ロジックを含むコンポーネント
- ディレクトリ例: `src/features/FeatureName/`
- 構成ファイル例:
  - `index.tsx` … hooksやロジックを記述し、presenterに渡す
  - `presenter.tsx` … 見た目部分のみを担当（propsで受け取る）
  - `index.module.css` … スタイル
  - `index.stories.tsx` … Storybook用ファイル（presenterを対象にする）
  - `index.test.tsx` … テストファイル

#### コーディングルール
- `index.tsx` で状態管理やロジックを記述し、`presenter.tsx` にpropsで渡す
- `presenter.tsx` は見た目のみを担当し、状態やロジックは持たない
- Storybookはpresenterを対象にする
- テストは「レンダリングされる」ことの確認＋必要に応じてロジックのテスト

---

## その他

- Storybookの説明やテストも必ず用意する
- 命名規則やprops設計は一貫性を持たせる
- 詳細は `plop-templates` の内容を参照

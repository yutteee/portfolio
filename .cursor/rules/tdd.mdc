---
description: 
globs: 
alwaysApply: true
---
# TDD（テスト駆動開発）によるReactコンポーネント実装・リファクタ指針

1. **仕様・要件を明確化する**
   - どのようなUI/UX・振る舞い・アクセシビリティ要件があるか整理する。
   - 画面設計やprops設計、状態管理の粒度も事前に検討する。

2. **テストファーストでテストケースを作成する**
   - @testing-library/react などを用い、ユーザー視点での振る舞いをテストで記述する。
   - 画面要素の有無、クリックやキーボード操作、フォーカス制御、状態変化、アクセシビリティなどを網羅する。
   - Storybookのストーリーも同時に用意するとベター。

3. **最小限の実装でテストをパスさせる**
   - まずはテストが通る最小限のUI/ロジックを実装する。
   - 失敗するテストがあれば、エラーメッセージをもとに実装を修正する。

4. **リファクタ・責務分離・型安全化**
   - コードの重複や責務の分離（presenter, hooks, features, uiなど）を進める。
   - 型安全性や再利用性、可読性を高めるリファクタを行う。
   - hooks化やprops設計の見直しもこの段階で。
   - 必要に応じてテストもリファクタ。

5. **アクセシビリティ・マシンリーダビリティの担保**
   - aria属性やrole、キーボード操作、フォーカス制御などをテストで担保する。
   - JSDOMの仕様でテストが難しい場合は、実装の正しさをコメントで補足する。

6. **Storybook・ドキュメント・テストの充実**
   - Storybookで各状態（PC/SP/ダーク/カレント/開閉など）を網羅する。
   - テストやストーリーの説明も充実させる。

7. **CI/CDやレビューでの自動テスト実行を徹底**
   - プッシュ・PR時にテストが自動実行されるようにする。
   - テストが落ちた場合は必ず修正してからマージする。

---

- **display: none での切り替え要素は、テスト時に複数DOMが存在する点に注意。withinやdata-testidで限定取得する。**
- **副作用的なフォーカス移動はhooksに集約し、テスト容易性・責務分離を意識する。**
- **テスト→実装→リファクタ→テスト…のサイクルを小さく回す。**

---
const { currentPage } = Astro.props;
import IconButton from "../../IconButton.astro";
---

<div class="hamburger">
  <IconButton label="メニューを開く" icon="clarity:menu-line" id="hamburger" />
</div>
<nav class="nav-links">
  <a href="/about/" class={currentPage === "私について" ? "current" : ""}
    >私について</a
  >
  <a href="/products/" class={currentPage === "プロダクト" ? "current" : ""}
    >プロダクト</a
  >
  <a href="/posts/" class={currentPage === "記事" ? "current" : ""}>記事</a>
</nav>
<div id="menu" class="sp-menu">
  <nav class="sp-nav">
    <a href="/">トップページ</a>
    <a href="/about/">私について</a>
    <a href="/products/">プロダクト</a>
    <a href="/posts/">記事</a>
  </nav>
  <div class="close">
    <IconButton label="メニューを閉じる" icon="clarity:close-line" id="close" />
  </div>
</div>

<script>
  const hamburger = document.getElementById("hamburger");
  const menu = document.getElementById("menu");
  const close = document.getElementById("close");

  if (hamburger && menu && close) {
    hamburger.addEventListener("click", () => {
      menu.classList.toggle("open");
      close.focus();
    });

    close.addEventListener("click", () => {
      menu.classList.remove("open");
      hamburger.focus();
    });

    // フォーカストラップ
    document.addEventListener("keydown", (event) => {
      const forcusableElements = menu.querySelectorAll("a, button");
      const firstElement = forcusableElements[0] as HTMLElement;
      const lastElement = forcusableElements[
        forcusableElements.length - 1
      ] as HTMLElement;

      if (event.key === "Tab") {
        if (event.shiftKey) {
          if (document.activeElement === firstElement) {
            lastElement.focus();
            event.preventDefault();
          }
        } else {
          if (document.activeElement === lastElement) {
            firstElement.focus();
            event.preventDefault();
          }
        }
      }
    });
  }
</script>

<style>
  .hamburger {
    display: none;
    @media screen and (max-width: 768px) {
      display: block;
    }
  }

  .nav-links {
    display: flex;
    gap: 16px;
    font-size: 18px;

    a {
      font-weight: bold;
    }

    @media screen and (max-width: 768px) {
      display: none;
    }
  }

  .nav-links a:hover,
  .nav-links a:focus {
    color: var(--color-link);
  }

  .current {
    color: var(--color-link);
    position: relative;
    /* beforeでボーダーを下につける */
    &::before {
      content: "";
      display: block;
      width: 100%;
      height: 4px;
      background-color: var(--color-link);
      position: absolute;
      bottom: -8px;
    }
  }

  .sp-menu {
    display: none;
  }

  .open {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: fixed;
    height: 100vh;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: var(--color-background);
    padding: 16px;
  }

  .close {
    position: fixed;
    top: 16px;
    right: 16px;
  }

  .sp-nav {
    display: flex;
    flex-direction: column;
    gap: 2rem;

    a {
      font-size: 1.5rem;
      font-weight: bold;
      width: fit-content;

      &:hover {
        text-decoration: underline;
      }
    }
  }
</style>

---
import BaseLayout from "../layouts/BaseLayout.astro";
const posts = await Astro.glob("../content/posts/*.md");
const pageTitle = "記事";
const pageDescription = "中村優作による記事一覧です。";
import { BlogPost } from "../ui/BlogPost";
import { PageTitle } from "../ui/PageTitle";

const getFileName = (file: string) => {
  const fileNameWithExtentision = file.split("/").pop();
  const fileName = fileNameWithExtentision?.replace(".md", "");

  return fileName;
};

import { externalBlogs } from "../data/externalBlog";
import { JSDOM } from "jsdom";

const getOgpImageFromUrl = async (url: string) => {
  const res = await fetch(url);
  const html = await res.text();
  const dom = new JSDOM(html);
  const ogpImage = dom.window.document
    .querySelector('meta[property="og:image"]')
    ?.getAttribute("content");

  return ogpImage;
};

// externalBlogsとpostsを結合する
const allPosts = [
  ...posts.map((post) => ({
    url: `/posts/${getFileName(post.file)}`,
    title: post.frontmatter.title,
    pubDate: post.frontmatter.pubDate,
    image: post.frontmatter.image
      ? post.frontmatter.image.url
      : `${import.meta.env.PUBLIC_SITE_URL}/ogp/${getFileName(post.file)}.png`,
    alt: post.frontmatter.image
      ? post.frontmatter.image.alt
      : `サムネイル画像。白いPCのイラストに、「${post.frontmatter.title}」の文字が重なっている。`,
    isExternal: false,
  })),
  ...externalBlogs.map((blog) => ({
    url: blog.url,
    title: blog.title,
    pubDate: blog.pubDate,
    image: getOgpImageFromUrl(blog.url),
    alt: `サムネイル画像。${blog.title}`,
    isExternal: true,
  })),
];

// allPostsを日付順に並び替える
allPosts.sort((a, b) => {
  const dateA = new Date(a.pubDate);
  const dateB = new Date(b.pubDate);

  return dateB.getTime() - dateA.getTime();
});
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <main class="container">
    <PageTitle title="記事" />
    <ul class="articles">
      {
        allPosts.map((post) => (
          <BlogPost
            url={post.url}
            title={post.title}
            image={post.image}
            date={post.pubDate}
            alt={post.alt}
            isExternal={post.isExternal}
          />
        ))
      }
    </ul>
  </main>
</BaseLayout>

<style>
  .container {
    display: flex;
    flex-direction: column;
    padding: 0 16px;
    align-items: center;
    .articles {
      padding-top: 64px;
      padding-bottom: 96px;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 64px 48px;
      list-style: none;
      max-width: 70rem;
      width: 100%;

      @media screen and (max-width: 1000px) {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
    }
  }
</style>
